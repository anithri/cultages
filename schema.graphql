# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"Card"
type Card {
    allowSelect: Boolean
    dice: [Dice!]!
    diceRequirements: [DiceRequirement!]!
    id: ID!
    location: String!
    name: String!
    reward: String!
    slug: Int!
}

"The connection type for Card."
type CardConnection {
    "A list of edges."
    edges: [CardEdge]
    "A list of nodes."
    nodes: [Card]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type CardEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Card
}

"CardSlot"
type CardSlot {
    cards: [Card!]!
    id: ID!
}

"Grid Corner"
type Corner {
    category: String!
    id: ID!
    x: Float!
    y: Float!
    z: Float!
}

"The connection type for Corner."
type CornerConnection {
    "A list of edges."
    edges: [CornerEdge]
    "A list of nodes."
    nodes: [Corner]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type CornerEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Corner
}

"Dice"
type Dice {
    id: ID!
    inUse: Boolean
    selected: Boolean
    slug: Int!
    theme: String
    value: Int!
}

"Dice Requirement"
type DiceRequirement {
    card: Card
    fillable: Boolean
    id: ID!
    slug: Int!
    theme: String!
    value: Int!
}

"Autogenerated return type of EndTurn"
type EndTurnPayload {
    errors: [String!]!
    game: Game!
}

"Autogenerated return type of FillRequirement"
type FillRequirementPayload {
    errors: [String!]!
    game: Game!
}

"Game"
type Game {
    boardSlots: [CardSlot!]!
    currentPlayerId: String
    discardsCardCount: Int!
    drawCardCount: Int!
    id: ID!
    messages: [Message!]!
    name: String
    players(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): PlayerConnection!
    selectedDice: Dice
    url: String!
}

"The connection type for Game."
type GameConnection {
    "A list of edges."
    edges: [GameEdge]
    "A list of nodes."
    nodes: [Game]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type GameEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Game
}

"Gridhex"
type Hex {
    center: Corner!
    corners(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): CornerConnection!
    id: ID!
    label: String!
    q: Int!
    r: Int!
    radius: Float!
    s: Int!
}

"The connection type for Hex."
type HexConnection {
    "A list of edges."
    edges: [HexEdge]
    "A list of nodes."
    nodes: [Hex]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type HexEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Hex
}

"Grid Map"
type Map {
    cols: Int!
    corners(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): CornerConnection!
    height: Int!
    hexes(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): HexConnection!
    id: ID!
    maxQ: Int!
    maxR: Int!
    maxS: Int!
    minQ: Int!
    minR: Int!
    minS: Int!
    name: String
    radius: Int!
    rows: Int!
    width: Int!
}

"The connection type for Map."
type MapConnection {
    "A list of edges."
    edges: [MapEdge]
    "A list of nodes."
    nodes: [Map]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type MapEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Map
}

"Message Type"
type Message {
    body: String
    type: String!
}

type Mutation {
    endTurn(gameId: ID!): EndTurnPayload
    fillRequirement(diceRequirementId: ID!): FillRequirementPayload
    selectDice(diceId: ID!): SelectDicePayload
    setupGame: SetupGamePayload
    startGame(gameId: ID!): StartGamePayload
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Player"
type Player {
    dice: [Dice!]!
    id: ID!
    money: Int!
    name: String!
    playerSlot: CardSlot!
    slug: String!
    theme: String!
}

"The connection type for Player."
type PlayerConnection {
    "A list of edges."
    edges: [PlayerEdge]
    "A list of nodes."
    nodes: [Player]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type PlayerEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Player
}

type Query {
    card(cardId: ID!): Card
    cards(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): CardConnection!
    dice(diceId: ID!): Dice
    diceRequirement(dicerequirementId: ID!): DiceRequirement
    diceRequirements: [DiceRequirement!]!
    dices: [Dice!]!
    game(gameId: ID!): Game
    games(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GameConnection!
    hexes(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): HexConnection!
    map(mapId: ID!): Map
    maps(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): MapConnection!
    player(playerId: ID!): Player
}

"Autogenerated return type of SelectDice"
type SelectDicePayload {
    errors: [String!]!
    game: Game!
}

"Autogenerated return type of SetupGame"
type SetupGamePayload {
    errors: [String!]!
    game: Game
}

"Autogenerated return type of StartGame"
type StartGamePayload {
    errors: [String!]!
    game: Game!
}
